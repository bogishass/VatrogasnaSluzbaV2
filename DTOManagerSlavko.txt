using DecijiLetnjiProgram.Entities;
using NHibernate.Hql.Ast.ANTLR.Tree;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.InteropServices;
using System.ServiceModel.Channels;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;


namespace DecijiLetnjiProgram
{
    public class DTOManager
    {
        #region Deca

        public static List<DeteOsnovneInfo> GetDecaOsnovneInfo()
        {
            var lista = new List<DeteOsnovneInfo>();
            try
            {
                var s = DataLayer.GetSession();

                IEnumerable<Dete> deca = from d in s.Query<Dete>() select d;

                foreach (var dete in deca)
                {
                    lista.Add(new DeteOsnovneInfo(dete.Id, dete.Ime, dete.Prezime, dete.DatumRodjenja, dete.Pol));
                }

                s.Close();
            }
            catch { }

            return lista;
        }

        public static List<DeteOsnovneInfo> GetDecaOsnovneInfoBySearchImeAndPrezime(string searchQuery)
        {
            var searchQueryToLower = searchQuery.ToLower();
            var lista = new List<DeteOsnovneInfo>();
            try
            {
                var s = DataLayer.GetSession();

                IEnumerable<Dete> deca = from d in s.Query<Dete>() where (d.Ime.ToLower().Contains(searchQueryToLower) || d.Prezime.ToLower().Contains(searchQueryToLower)) select d;

                foreach (var dete in deca)
                {
                    lista.Add(new DeteOsnovneInfo(dete.Id, dete.Ime, dete.Prezime, dete.DatumRodjenja, dete.Pol));
                }

                s.Close();
            }
            catch { }

            return lista;
        }

        public static DeteBasic GetDeteBasicFromId(int id)
        {
            bool deteLoadovano = false;
            DeteBasic dete = null;
            try
            {
                var s = DataLayer.GetSession();
                IEnumerable<Dete> deteRez = from d in s.Query<Dete>() where d.Id == id select d;
                foreach (var d in deteRez)
                {
                    dete = new DeteBasic(d.Id, d.Ime, d.Prezime, d.DatumRodjenja, d.Pol, d.Adresa, d.KontaktTelefon, d.EmailRoditelja, d.BrojTelefona, d.EmailDeteta);
                    deteLoadovano = true;
                }

                s.Close();
            }
            catch { }
            if (!deteLoadovano)
                throw new Exception("Nije nadjeno dete sa prosledjenim ID-jem");
            return dete;
        }

        public static void DodajDete(DeteBasic dete)
        {
            try
            {
                var s = DataLayer.GetSession();

                Dete d = new Dete();

                d.Ime = dete.Ime;
                d.Prezime = dete.Prezime;
                d.Pol = dete.Pol;
                d.Adresa = dete.Adresa;
                d.DatumRodjenja = dete.DatumRodjenja;
                d.BrojTelefona = dete.BrojTelefona;
                d.EmailDeteta = dete.EmailDeteta;
                d.EmailRoditelja = dete.EmailRoditelja;
                d.KontaktTelefon = dete.KontaktTelefon;

                s.Save(d);
                s.Flush();
                s.Close();
            }
            catch { }
        }

        public static void AzurirajDete(DeteBasic dete)
        {
            try
            {
                var s = DataLayer.GetSession();

                Dete d = s.Load<Dete>(dete.Id);
                d.Ime = dete.Ime;
                d.Prezime = dete.Prezime;
                d.DatumRodjenja = dete.DatumRodjenja;
                d.Pol = dete.Pol;
                d.EmailDeteta = dete.EmailDeteta;
                d.EmailRoditelja = dete.EmailRoditelja;
                d.KontaktTelefon = dete.KontaktTelefon;
                d.Adresa = dete.Adresa;
                d.BrojTelefona = dete.BrojTelefona;

                s.Update(d);
                s.Flush();
                s.Close();
            }
            catch { }
        }

        public static void ObrisiDete(int id)
        {
            try
            {
                var s = DataLayer.GetSession();

                Dete d = s.Load<Dete>(id);

                s.Delete(d);
                s.Flush();
                s.Close();
            }
            catch { }
        }

        public static List<ZdravstvenoOgranicenjeBasic> VratiZdravstvenaOgranicenjaZaDete(int id)
        {
            var lista = new List<ZdravstvenoOgranicenjeBasic>();
            try
            {
                var s = DataLayer.GetSession();

                IEnumerable<ZdravstvenoOgranicenje> zdravstvenaOgranicenja = from z in s.Query<ZdravstvenoOgranicenje>() where z.Dete.Id == id select z;

                foreach (var ogr in zdravstvenaOgranicenja)
                {
                    lista.Add(new ZdravstvenoOgranicenjeBasic(ogr.Id, ogr.Ogranicenje));
                }

                s.Close();
            }
            catch { }

            return lista;
        }

        public static void DodajZdravstvenoOgranicenjeZaDete(ZdravstvenoOgranicenjeBasic zdravstvenoOgranicenjeBasic, int deteId)
        {
            try
            {
                var s = DataLayer.GetSession();

                ZdravstvenoOgranicenje zo = new ZdravstvenoOgranicenje()
                {
                    Ogranicenje = zdravstvenoOgranicenjeBasic.Ogranicenje,
                    Dete = s.Load<Dete>(deteId)
                };

                s.Save(zo);
                s.Flush();
                s.Close();
            }
            catch { }
        }

        public static void AzurirajZdravstvenoOgranicenje(ZdravstvenoOgranicenjeBasic zdravstvenoOgranicenjeBasic)
        {
            try
            {
                var s = DataLayer.GetSession();

                ZdravstvenoOgranicenje zo = s.Load<ZdravstvenoOgranicenje>(zdravstvenoOgranicenjeBasic.Id);
                zo.Ogranicenje = zdravstvenoOgranicenjeBasic.Ogranicenje;

                s.Update(zo);
                s.Flush();
                s.Close();
            }
            catch { }
        }

        public static void ObrisiZdravstvenoOgranicenje(int id)
        {
            try
            {
                var s = DataLayer.GetSession();

                ZdravstvenoOgranicenje zo = s.Load<ZdravstvenoOgranicenje>(id);

                s.Delete(zo);
                s.Flush();
                s.Close();
            }
            catch { }
        }

        #endregion

        #region Lokacije

        public static List<LokacijaOsnovneInfo> GetLokacijeOsnovneInfo()
        {
            var lista = new List<LokacijaOsnovneInfo>();
            try
            {
                var s = DataLayer.GetSession();

                IEnumerable<Lokacija> lokacije = from l in s.Query<Lokacija>() select l;
                foreach (var l in lokacije)
                    lista.Add(new LokacijaOsnovneInfo(l.Id, l.Naziv, l.Adresa, l.Tip, l.Kapacitet));

                s.Close();
            }
            catch { }
            return lista;
        }

        public static List<LokacijaOsnovneInfo> GetLokacijeOsnovneInfoBySearch(string searchQuery)
        {
            var q = (searchQuery ?? string.Empty).ToLower();
            var lista = new List<LokacijaOsnovneInfo>();
            try
            {
                var s = DataLayer.GetSession();

                IEnumerable<Lokacija> lokacije =
                    from l in s.Query<Lokacija>()
                    where l.Naziv.ToLower().Contains(q) || l.Adresa.ToLower().Contains(q)
                    select l;

                foreach (var l in lokacije)
                    lista.Add(new LokacijaOsnovneInfo(l.Id, l.Naziv, l.Adresa, l.Tip, l.Kapacitet));

                s.Close();
            }
            catch { }
            return lista;
        }

        public static LokacijaBasic GetLokacijaBasicFromId(int id)
        {
            bool ok = false;
            LokacijaBasic dto = null;
            try
            {
                var s = DataLayer.GetSession();
                IEnumerable<Lokacija> rez = from l in s.Query<Lokacija>() where l.Id == id select l;
                foreach (var l in rez)
                {
                    dto = new LokacijaBasic(l.Id, l.Naziv, l.Adresa, l.Tip, l.Kapacitet, l.TipOpreme);
                    ok = true;
                }
                s.Close();
            }
            catch { }
            if (!ok)
                throw new Exception("Nije nadjena lokacija sa prosledjenim ID-jem");
            return dto;
        }

        public static void DodajLokaciju(LokacijaBasic lok)
        {
            try
            {
                var s = DataLayer.GetSession();

                var l = new Lokacija
                {
                    Naziv = lok.Naziv,
                    Adresa = lok.Adresa,
                    Tip = lok.Tip,
                    Kapacitet = lok.Kapacitet,
                    TipOpreme = lok.TipOpreme
                };

                s.Save(l);
                s.Flush();
                s.Close();
            }
            catch { }
        }

        public static void AzurirajLokaciju(LokacijaBasic lok)
        {
            try
            {
                var s = DataLayer.GetSession();
                var l = s.Load<Lokacija>(lok.Id);

                l.Naziv = lok.Naziv;
                l.Adresa = lok.Adresa;
                l.Tip = lok.Tip;
                l.Kapacitet = lok.Kapacitet;
                l.TipOpreme = lok.TipOpreme;

                s.Update(l);
                s.Flush();
                s.Close();
            }
            catch { }
        }

        public static void ObrisiLokaciju(int id)
        {
 
            {
                var s = DataLayer.GetSession();

                // Blokiraj brisanje ako postoje aktivnosti na lokaciji
                bool imaAktivnosti = (from a in s.Query<Aktivnost>() where a.Lokacija.Id == id select a).Any();
                if (imaAktivnosti)
                {
                    s.Close();
                    throw new Exception("Brisanje nije dozvoljeno: postoje aktivnosti na toj lokaciji.");
                }

                var l = s.Load<Lokacija>(id);
                s.Delete(l);
                s.Flush();
                s.Close();
            }

        }

        #endregion
        #region Aktivnosti

        public static DateTime GetMinAktivnostDate()
        {
            var datum = DateTime.Now;
            try
            {
                var s = DataLayer.GetSession();

                IEnumerable<DateTime> dt;
                dt = from a in s.Query<Aktivnost>()
                     select a.DatumIVreme;

                datum = dt.OrderBy(d => d.Date).FirstOrDefault();

                s.Close();
            }
            catch { }
            return datum;
        }

        public static List<AktivnostOsnovneInfo> GetAktivnostiOsnovneInfo(string aktivnostNaziv = null, DateTime? datumOd = null, int lokacija = -1)
        {
            var naziv = aktivnostNaziv ?? "";
            var datumOdValue = datumOd ?? DateTime.MinValue;
            var lista = new List<AktivnostOsnovneInfo>();
            try
            {
                var s = DataLayer.GetSession();

                IEnumerable<Aktivnost> aktivnosti;
                if (lokacija != -1)
                    aktivnosti = from a in s.Query<Aktivnost>()
                                 where a.Naziv.ToLower().Contains(aktivnostNaziv) && a.DatumIVreme >= datumOdValue && a.Lokacija.Id == lokacija
                                 select a;
                else
                    aktivnosti = from a in s.Query<Aktivnost>()
                                 where a.Naziv.ToLower().Contains(aktivnostNaziv) && a.DatumIVreme >= datumOdValue
                                 select a;

                foreach (var a in aktivnosti)
                    lista.Add(new AktivnostOsnovneInfo(
                        a.Id, a.Naziv, a.Tip, a.DatumIVreme, a.Lokacija.Id, a.Lokacija.Naziv, a.StarosnaGrupa));

                s.Close();
            }
            catch { }
            return lista;
        }

        public static List<AktivnostOsnovneInfo> GetAktivnostiDataGridViewInfo(string aktivnostNaziv = null)
        {
            var lista = new List<AktivnostOsnovneInfo>();
            try
            {
                var s = DataLayer.GetSession();

                IEnumerable<Aktivnost> aktivnosti;
                if (aktivnostNaziv != null)
                    aktivnosti = from a in s.Query<Aktivnost>() where a.Naziv == aktivnostNaziv select a;
                else
                    aktivnosti = from a in s.Query<Aktivnost>() select a;

                foreach (var a in aktivnosti)
                    lista.Add(new AktivnostOsnovneInfo(
                        a.Id, a.Naziv, a.Tip, a.DatumIVreme, a.Lokacija.Id, a.Lokacija.Naziv, a.StarosnaGrupa));

                s.Close();
            }
            catch { }
            return lista;
        }

        public static AktivnostBasic GetAktivnostBasicFromId(int id)
        {
            bool ok = false;
            AktivnostBasic dto = null;
            try
            {
                var s = DataLayer.GetSession();
                IEnumerable<Aktivnost> rez = from a in s.Query<Aktivnost>() where a.Id == id select a;
                foreach (var a in rez)
                {
                    dto = new AktivnostBasic(
                        a.Id,
                        a.Naziv,
                        a.Tip,
                        a.DatumIVreme,
                        a.StarosnaGrupa,
                        a.MaxBrojUcesnika,
                        a.Lokacija.Id,
                        a.TipRadionice,
                        a.Sport,
                        a.PosebnaOprema,
                        a.PrevoznoSredstvo,
                        a.PlanPuta,
                        a.Vodic,
                        a.PotrebnaOprema,
                        a.TipKulturnogPrograma
                    );
                    ok = true;
                }
                s.Close();
            }
            catch { }
            if (!ok)
                throw new Exception("Nije nadjena aktivnost sa prosledjenim ID-jem");
            return dto;
        }

        private static void ValidirajAktivnost(AktivnostBasic a)
        {
            if (a.MaxBrojUcesnika <= 0)
                throw new Exception("max_broj_ucesnika mora biti > 0");

            if (a.DatumIVreme <= DateTime.Now)
                throw new Exception("datum_i_vreme mora biti u budućnosti");

            string tip = (a.Tip ?? "").ToLower();

            //if (tip == "radionica" && string.IsNullOrWhiteSpace(a.TipRadionice))
            //    throw new Exception("Za tip 'radionica' potrebno je uneti tip_radionice.");

            if (tip == "sportski_trening" && string.IsNullOrWhiteSpace(a.Sport))
                throw new Exception("Za tip 'sportski_trening' potrebno je uneti sport.");

            if (tip == "izlet" && (string.IsNullOrWhiteSpace(a.PrevoznoSredstvo) || string.IsNullOrWhiteSpace(a.PlanPuta)))
                throw new Exception("Za tip 'izlet' potrebno je uneti prevozno_sredstvo i plan_puta.");

            if (tip == "kulturni_program" && string.IsNullOrWhiteSpace(a.TipKultProg))
                throw new Exception("Za tip 'kulturni_program' potrebno je uneti tip_kulturnog_programa.");
        }

        public static void DodajAktivnost(AktivnostBasic a)
        {

                ValidirajAktivnost(a);

                var s = DataLayer.GetSession();

                var ent = new Aktivnost
                {
                    Naziv = a.Naziv,
                    Tip = a.Tip,
                    DatumIVreme = a.DatumIVreme,
                    StarosnaGrupa = a.StarosnaGrupa,
                    MaxBrojUcesnika = a.MaxBrojUcesnika,
                    Lokacija = s.Load<Lokacija>(a.LokacijaId),

                    TipRadionice = a.TipRadionice,
                    Sport = a.Sport,
                    PosebnaOprema = a.PosebnaOprema,
                    PrevoznoSredstvo = a.PrevoznoSredstvo,
                    PlanPuta = a.PlanPuta,
                    Vodic = a.Vodic,
                    PotrebnaOprema = a.PotrebnaOprema,
                    TipKulturnogPrograma = a.TipKultProg
                };

                s.Save(ent);
                s.Flush();
                s.Close();
        }
        

        public static void AzurirajAktivnost(AktivnostBasic a)
        {
            try
            {
                ValidirajAktivnost(a);

                var s = DataLayer.GetSession();

                var ent = s.Load<Aktivnost>(a.Id);
                ent.Naziv = a.Naziv;
                ent.Tip = a.Tip;
                ent.DatumIVreme = a.DatumIVreme;
                ent.StarosnaGrupa = a.StarosnaGrupa;
                ent.MaxBrojUcesnika = a.MaxBrojUcesnika;
                ent.Lokacija = s.Load<Lokacija>(a.LokacijaId);

                ent.TipRadionice = a.TipRadionice;
                ent.Sport = a.Sport;
                ent.PosebnaOprema = a.PosebnaOprema;
                ent.PrevoznoSredstvo = a.PrevoznoSredstvo;
                ent.PlanPuta = a.PlanPuta;
                ent.Vodic = a.Vodic;
                ent.PotrebnaOprema = a.PotrebnaOprema;
                ent.TipKulturnogPrograma = a.TipKultProg;

                s.Update(ent);
                s.Flush();
                s.Close();
            }
            catch { }
        }

        public static void ObrisiAktivnost(int id)
        {
            try
            {
                var s = DataLayer.GetSession();
                var a = s.Load<Aktivnost>(id);

                s.Delete(a);
                s.Flush();
                s.Close();
            }
            catch { }
        }

        public static List<AktZdravstvenoOgranicenjeBasic> VratiZdravstvenaOgranicenjaZaAktivnost(int id)
        {
            var lista = new List<AktZdravstvenoOgranicenjeBasic>();
            try
            {
                var s = DataLayer.GetSession();

                IEnumerable<AktZdravstvenoOgranicenje> zdravstvenaOgranicenja = from z in s.Query<AktZdravstvenoOgranicenje>() where z.Aktivnost.Id == id select z;

                foreach (var ogr in zdravstvenaOgranicenja)
                {
                    lista.Add(new AktZdravstvenoOgranicenjeBasic(ogr.Id, ogr.Ogranicenje));
                }

                s.Close();
            }
            catch { }

            return lista;
        }

        #endregion

        // ========================================
        // ==  OGRANIČENJA NA NIVOU AKTIVNOSTI   ==
        // ========================================
        #region AktZdravstvenaOgranicenja

        public static List<AktZdravstvenoOgranicenjeBasic> VratiAktZdravstvenaOgranicenjaZaAktivnost(int aktivnostId)
        {
            var lista = new List<AktZdravstvenoOgranicenjeBasic>();
            try
            {
                var s = DataLayer.GetSession();

                IEnumerable<AktZdravstvenoOgranicenje> ogranicenja =
                    from z in s.Query<AktZdravstvenoOgranicenje>()
                    where z.Aktivnost.Id == aktivnostId
                    select z;

                foreach (var o in ogranicenja)
                    lista.Add(new AktZdravstvenoOgranicenjeBasic(o.Id, o.Ogranicenje));

                s.Close();
            }
            catch { }
            return lista;
        }

        public static void DodajAktZdravstvenoOgranicenjeZaAktivnost(AktZdravstvenoOgranicenjeBasic ogranicenje, int aktivnostId)
        {
            try
            {
                var s = DataLayer.GetSession();

                var ent = new AktZdravstvenoOgranicenje
                {
                    Ogranicenje = ogranicenje.Ogranicenje,
                    Aktivnost = s.Load<Aktivnost>(aktivnostId)
                };

                s.Save(ent);
                s.Flush();
                s.Close();
            }
            catch { }
        }

        public static void AzurirajAktZdravstvenoOgranicenje(AktZdravstvenoOgranicenjeBasic ogranicenje)
        {
            try
            {
                var s = DataLayer.GetSession();

                var ent = s.Load<AktZdravstvenoOgranicenje>(ogranicenje.Id);
                ent.Ogranicenje = ogranicenje.Ogranicenje;

                s.Update(ent);
                s.Flush();
                s.Close();
            }
            catch { }
        }

        public static void ObrisiAktZdravstvenoOgranicenje(int id)
        {
            try
            {
                var s = DataLayer.GetSession();

                var ent = s.Load<AktZdravstvenoOgranicenje>(id);
                s.Delete(ent);
                s.Flush();
                s.Close();
            }
            catch { }
        }

        #endregion

        // ========================================
        // ==  DODELA ODGOVORNIH LICA (osnovno)  ==
        // ========================================




        #region DodelaOdgovornihLica

        public static List<OdgovornoLiceOsnovneInfo> VratiSvaOdgovornaLica()
        {
            var lista = new List<OdgovornoLiceOsnovneInfo>();
            try
            {
                var s = DataLayer.GetSession();
                IEnumerable<OdgovornoLice> lica = from o in s.Query<OdgovornoLice>() select o;

                foreach (var o in lica)
                    lista.Add(new OdgovornoLiceOsnovneInfo(o.Jmbg, o.Ime, o.Prezime, o.Email, o.BrojTelefona));

                s.Close();
            }
            catch { }
            return lista;
        }

        public static List<OdgovornoLiceOsnovneInfo> VratiOdgovornaLicaZaAktivnost(int aktivnostId)
        {
            var lista = new List<OdgovornoLiceOsnovneInfo>();
            try
            {
                var s = DataLayer.GetSession();

                var a = s.Load<Aktivnost>(aktivnostId);
                foreach (var o in a.OdgovornaLica) // pretpostavka: many-to-many Aktivnost <-> OdgovornoLice
                    lista.Add(new OdgovornoLiceOsnovneInfo(o.Jmbg, o.Ime, o.Prezime, o.Email, o.BrojTelefona));

                s.Close();
            }
            catch { }
            return lista;
        }

        public static void DodeliOdgovornoLiceAktivnosti(string jmbgLica, int aktivnostId)
        {
            try
            {
                var s = DataLayer.GetSession();

                var a = s.Load<Aktivnost>(aktivnostId);
                var o = s.Load<OdgovornoLice>(jmbgLica);

                a.OdgovornaLica.Add(o);
                o.Aktivnosti.Add(a);

                s.Update(a);
                s.Update(o);
                s.Flush();
                s.Close();
            }
            catch { }
        }

        public static void UkloniOdgovornoLiceSaAktivnosti(string jmbgLica, int aktivnostId)
        {
            try
            {
                var s = DataLayer.GetSession();

                var a = s.Load<Aktivnost>(aktivnostId);
                var o = s.Load<OdgovornoLice>(jmbgLica);

                a.OdgovornaLica.Remove(o);
                o.Aktivnosti.Remove(a);

                s.Update(a);
                s.Update(o);
                s.Flush();
                s.Close();
            }
            catch { }
        }

        #endregion




        #region OdgovornaLica

        public static List<OdgovornoLiceOsnovneInfo> GetOdgovornaLicaOsnovneInfoBySearch(string searchQuery)
        {
            var q = (searchQuery ?? string.Empty).ToLower();
            var lista = new List<OdgovornoLiceOsnovneInfo>();
            try
            {
                var s = DataLayer.GetSession();

                IEnumerable<OdgovornoLice> lica =
                    from o in s.Query<OdgovornoLice>()
                    where o.Ime.ToLower().Contains(q) || o.Prezime.ToLower().Contains(q) || o.Jmbg.ToLower().Contains(q)
                    select o;

                foreach (var o in lica)
                    lista.Add(new OdgovornoLiceOsnovneInfo(o.Jmbg, o.Ime, o.Prezime, o.Email, o.BrojTelefona));

                s.Close();
            }
            catch { }
            return lista;
        }

        public static OdgovornoLiceBasic GetOdgovornoLiceBasicByJmbg(string jmbg)
        {
            bool ok = false;
            OdgovornoLiceBasic dto = null;
            try
            {
                var s = DataLayer.GetSession();

                IEnumerable<OdgovornoLice> rez = from o in s.Query<OdgovornoLice>() where o.Jmbg == jmbg select o;
                foreach (var o in rez)
                {
                    dto = new OdgovornoLiceBasic(o.Jmbg, o.Ime, o.Prezime, o.Pol, o.Adresa, o.Email, o.BrojTelefona, o.StrucnaSprema);
                    ok = true;
                }

                s.Close();
            }
            catch { }
            if (!ok)
                throw new Exception("Nije pronađeno odgovorno lice sa zadatim JMBG.");
            return dto;
        }

        private static void ValidirajOdgovornoLice(OdgovornoLiceBasic o)
        {
            if (string.IsNullOrWhiteSpace(o.Jmbg) || o.Jmbg.Length != 13 || !o.Jmbg.All(char.IsDigit))
                throw new Exception("JMBG mora imati tačno 13 cifara.");

            if (string.IsNullOrWhiteSpace(o.Ime) || string.IsNullOrWhiteSpace(o.Prezime) || string.IsNullOrWhiteSpace(o.Pol))
                throw new Exception("Ime, prezime i pol su obavezni.");

            // vrlo jednostavna provera formata email-a (dovoljna za UI validaciju)
            if (string.IsNullOrWhiteSpace(o.Email) || !Regex.IsMatch(o.Email, @"^[^@\s]+@[^@\s]+\.[^@\s]+$"))
                throw new Exception("Email nije ispravnog formata.");
        }

        public static void DodajOdgovornoLice(OdgovornoLiceBasic lice)
        {
            try
            {
                ValidirajOdgovornoLice(lice);

                var s = DataLayer.GetSession();

                // Provera duplikata JMBG
                bool postoji = (from x in s.Query<OdgovornoLice>() where x.Jmbg == lice.Jmbg select x).Any();
                if (postoji)
                {
                    s.Close();
                    throw new Exception("Lice sa istim JMBG već postoji.");
                }

                var o = new OdgovornoLice
                {
                    Jmbg = lice.Jmbg,
                    Ime = lice.Ime,
                    Prezime = lice.Prezime,
                    Pol = lice.Pol,
                    Adresa = lice.Adresa,
                    Email = lice.Email,
                    BrojTelefona = lice.BrojTelefona,
                    StrucnaSprema = lice.StrucnaSprema
                };

                s.Save(o);
                s.Flush();
                s.Close();
            }
            catch { }
        }

        public static void AzurirajOdgovornoLice(OdgovornoLiceBasic lice)
        {
            try
            {
                ValidirajOdgovornoLice(lice);

                var s = DataLayer.GetSession();
                var o = s.Load<OdgovornoLice>(lice.Jmbg);

                o.Ime = lice.Ime;
                o.Prezime = lice.Prezime;
                o.Pol = lice.Pol;
                o.Adresa = lice.Adresa;
                o.Email = lice.Email;
                o.BrojTelefona = lice.BrojTelefona;
                o.StrucnaSprema = lice.StrucnaSprema;

                s.Update(o);
                s.Flush();
                s.Close();
            }
            catch { }
        }

        public static void ObrisiOdgovornoLice(string jmbg)
        {
            try
            {
                var s = DataLayer.GetSession();

                var o = s.Load<OdgovornoLice>(jmbg);

                // Ako je angažovan na aktivnostima, blokiraj brisanje (po potrebi UI)
                if (o.Aktivnosti != null && o.Aktivnosti.Count > 0)
                {
                    s.Close();
                    throw new Exception("Brisanje nije dozvoljeno: lice je angažovano na aktivnostima.");
                }

                s.Delete(o);
                s.Flush();
                s.Close();
            }
            catch { }
        }

        public static List<AktivnostOsnovneInfo> VratiAktivnostiZaOdgovornoLice(string jmbg)
        {
            var lista = new List<AktivnostOsnovneInfo>();
            try
            {
                var s = DataLayer.GetSession();

                var o = s.Load<OdgovornoLice>(jmbg);
                foreach (var a in o.Aktivnosti)
                    lista.Add(new AktivnostOsnovneInfo(a.Id, a.Naziv, a.Tip, a.DatumIVreme, a.Lokacija.Id, a.Lokacija.Naziv, a.StarosnaGrupa));

                s.Close();
            }
            catch { }
            return lista;
        }

        #endregion





        #region UlogeOdgovornihLica

        public static List<UlogaOdgovornogLicaBasic> VratiUlogeZaLice(string jmbg)
        {
            var lista = new List<UlogaOdgovornogLicaBasic>();
            try
            {
                var s = DataLayer.GetSession();

                IEnumerable<UlogaOdgovornogLica> uloge =
                    from u in s.Query<UlogaOdgovornogLica>()
                    where u.OdgovornoLice.Jmbg == jmbg
                    select u;

                foreach (var u in uloge)
                    lista.Add(new UlogaOdgovornogLicaBasic(u.Id, u.Uloga));

                s.Close();
            }
            catch { }
            return lista;
        }

        private static readonly string[] _dozvoljeneUloge = new[] { "nastavnik", "animator", "trener", "zdravstveni_radnik", "volonter" };

        public static void DodajUloguLicu(string jmbg, string uloga)
        {
            try
            {
                var u = (uloga ?? string.Empty).Trim().ToLower();
                if (!_dozvoljeneUloge.Contains(u))
                    throw new Exception("Uloga nije dozvoljena. Dozvoljene vrednosti: nastavnik/animator/trener/zdravstveni_radnik/volonter.");

                var s = DataLayer.GetSession();

                var lice = s.Load<OdgovornoLice>(jmbg);

                // unique po (lice + uloga)
                bool postoji = (from x in s.Query<UlogaOdgovornogLica>()
                                where x.OdgovornoLice.Jmbg == jmbg && x.Uloga.ToLower() == u
                                select x).Any();
                if (postoji)
                {
                    s.Close();
                    throw new Exception("Ta uloga je već dodeljena ovom licu.");
                }

                var ent = new UlogaOdgovornogLica
                {
                    Uloga = u,
                    OdgovornoLice = lice
                };

                s.Save(ent);
                s.Flush();
                s.Close();
            }
            catch { }
        }

        public static void ObrisiUloguLicu(int ulogaId)
        {
            try
            {
                var s = DataLayer.GetSession();

                var ent = s.Load<UlogaOdgovornogLica>(ulogaId);
                s.Delete(ent);

                s.Flush();
                s.Close();
            }
            catch { }
        }

        #endregion

        #region Prijave

        internal static PrijavaGridInfo GetPrijavaGridInfoById(int id)
        {
            var rez = new PrijavaGridInfo();
            try
            {
                var s = DataLayer.GetSession();
                IEnumerable<Prijava> q = from p in s.Query<Prijava>() where p.Id == id select p;
                if (q.Count() == 1)
                {
                    var el = q.First();
                    rez = new PrijavaGridInfo(id, el.Dete.Ime + " " + el.Dete.Prezime, el.Datum, el.Status, el.Aktivnosti.Count);
                }
                s.Close();
            }
            catch { }

            return rez;
        }

        internal static List<PrijavaGridInfo> GetPrijave(DateTime? datumOd = null, DateTime? datumDo = null, int? idDeteta = null, int? idAktivnosti = null, string status = "")
        {
            status = status ?? "";

            if(datumOd == null)
                datumOd = DateTime.MinValue;
            datumOd = datumOd.Value.Date;
            if(datumDo == null)
                datumDo = DateTime.MaxValue.AddDays(-1);
            datumDo = datumDo.Value.Date.AddDays(1);

            var lista = new List<PrijavaGridInfo>();
            try
            {
                var s = DataLayer.GetSession();

                IEnumerable<Prijava> q = from p in s.Query<Prijava>() select p;

                q = q.Where(p => p.Datum >= datumOd.Value && p.Datum <= datumDo.Value);

                if(status != "" && status != "Svi statusi")
                    q = q.Where(p => p.Status == status);

                if (idDeteta.HasValue)
                    q = q.Where(p => p.Dete.Id == idDeteta.Value);

                if (idAktivnosti.HasValue)
                    q = q.Where(p => p.Aktivnosti.Any(a => a.Id == idAktivnosti.Value));

                foreach (var p in q)
                {
                    var imeIPrezime = "";
                    if (p.Dete != null)
                        imeIPrezime = p.Dete.Ime + " " + p.Dete.Prezime;

                    var brojAktivnosti = 0;
                    if(p.Aktivnosti != null)
                        brojAktivnosti = p.Aktivnosti.Count;

                    lista.Add(new PrijavaGridInfo(
                        p.Id,
                        imeIPrezime,
                        p.Datum,
                        p.Status ?? "",
                        brojAktivnosti
                    ));
                }

                s.Close();
            }
            catch { }

            return lista;
        }

        public static void DodajPrijavu(int deteId, DateTime datumPrijave, string status, List<int> aktivnostiIds)
        {
            try
            {
                var s = DataLayer.GetSession();
                var dete = s.Load<Dete>(deteId);
                var prijava = new Prijava
                {
                    Dete = dete,
                    Datum = datumPrijave,
                    Status = status
                };

                if (aktivnostiIds != null)
                {
                    foreach (var aktId in aktivnostiIds)
                    {
                        var aktivnost = s.Load<Aktivnost>(aktId);
                        if (!DeteUpadaUStarosnuGrupu(dete, aktivnost))
                        {
                            s.Close();
                            throw new Exception("Dete " + dete.Ime + " " + dete.Prezime + " ne upada u starosnu grupu aktivnosti " + aktivnost.Naziv);
                        }
                        prijava.Aktivnosti.Add(aktivnost);
                    }
                }

                s.Save(prijava);
                s.Flush();
                s.Close();
            }
            catch (Exception ex) { throw new Exception(ex.Message); }
        }

        public static void AzurirajStatusPrijave(int prijavaId, string noviStatus)
        {
            try
            {
                var s = DataLayer.GetSession();

                var p = s.Load<Prijava>(prijavaId);
                p.Status = noviStatus;

                s.Update(p);
                s.Flush();
                s.Close();
            }
            catch { throw new Exception(); }
        }

        public static void ObrisiPrijavu(int prijavaId)
        {
            try
            {
                var s = DataLayer.GetSession();

                var p = s.Load<Prijava>(prijavaId);

                if (p.Aktivnosti != null && p.Aktivnosti.Count > 0)
                {
                    var aktivnosti = p.Aktivnosti.ToList();
                    foreach (var a in aktivnosti)
                    {
                        a.Prijave.Remove(p);
                    }
                    p.Aktivnosti.Clear();
                }

                s.Delete(p);
                s.Flush();
                s.Close();
            }
            catch { }
        }

        public static List<AktivnostOsnovneInfo> GetAktivnostiZaPrijavu(int prijavaId)
        {
            var lista = new List<AktivnostOsnovneInfo>();
            try
            {
                var s = DataLayer.GetSession();

                var p = s.Load<Prijava>(prijavaId);
                if (p.Aktivnosti != null)
                {
                    foreach (var a in p.Aktivnosti)
                    {
                        lista.Add(new AktivnostOsnovneInfo(
                            a.Id, a.Naziv, a.Tip, a.DatumIVreme,
                            a.Lokacija.Id, a.Lokacija.Naziv, a.StarosnaGrupa));
                    }
                }

                s.Close();
            }
            catch { }

            return lista;
        }

        #endregion

        #region Evidencija

        public static List<AktivnostOsnovneInfo> GetAktivnostiNaDan(DateTime dan)
        {
            var pocetakDana = dan.Date;
            var krajDana = pocetakDana.AddDays(1);
            var lista = new List<AktivnostOsnovneInfo>();
            try
            {
                var s = DataLayer.GetSession();

                var aktivnosti = from a in s.Query<Aktivnost>()
                                 where a.DatumIVreme >= pocetakDana && a.DatumIVreme < krajDana
                                 select a;

                foreach (var a in aktivnosti)
                    lista.Add(new AktivnostOsnovneInfo(
                        a.Id, a.Naziv, a.Tip, a.DatumIVreme, a.Lokacija.Id, a.Lokacija.Naziv, a.StarosnaGrupa));

                s.Close();
            }
            catch { }
            return lista;
        }

        public static List<DeteOsnovneInfo> GetOdobrenaDecaZaAktivnost(int aktivnostId)
        {
            var lista = new List<DeteOsnovneInfo>();
            try
            {
                var s = DataLayer.GetSession();

                var odobrene = from p in s.Query<Prijava>()
                               where p.Status == "odobreno" && p.Aktivnosti.Any(a => a.Id == aktivnostId)
                               select p;

                foreach (var prijava in odobrene)
                {
                    var d = prijava.Dete;
                    lista.Add(new DeteOsnovneInfo(d.Id, d.Ime, d.Prezime, d.DatumRodjenja, d.Pol));
                }

                s.Close();
            }
            catch { }
            return lista;
        }

        public static List<EvidencijaBasic> GetEvidencijaZaAktivnost(int aktivnostId)
        {
            var lista = new List<EvidencijaBasic>();
            try
            {
                var s = DataLayer.GetSession();

                var a = s.Load<Aktivnost>(aktivnostId);
                foreach (var e in a.Evidencije)
                {
                    var pratilacId = e.Pratilac?.Id;
                    var pratilacIme = "";
                    if (e.Pratilac != null)
                        pratilacIme = e.Pratilac.Ime + " " + e.Pratilac.Prezime;
                    lista.Add(new EvidencijaBasic(
                        e.Dete.Id,
                        e.Dete.Ime + " " + e.Dete.Prezime,
                        pratilacId,
                        pratilacIme));
                }

                s.Close();
            }
            catch { }
            return lista;
        }

        public static void DodajUEvidenciju(int aktivnostId, int deteId)
        {
            try
            {
                var s = DataLayer.GetSession();

                var a = s.Load<Aktivnost>(aktivnostId);
                var d = s.Load<Dete>(deteId);

                bool postoji = a.Evidencije.Any(ev => ev.Dete.Id == deteId);
                if (!postoji)
                {
                    var ev = new Evidencija { Aktivnost = a, Dete = d, Pratilac = null };
                    a.Evidencije.Add(ev);
                    d.Evidencije.Add(ev);
                }

                s.Flush();
                s.Close();
            }
            catch { }
        }

        public static void UkloniIzEvidencije(int aktivnostId, int deteId)
        {
            try
            {
                var s = DataLayer.GetSession();

                var a = s.Load<Aktivnost>(aktivnostId);
                var ev = a.Evidencije.FirstOrDefault(x => x.Dete.Id == deteId && x.Aktivnost.Id == aktivnostId);
                if (ev != null)
                    s.Delete(ev);

                s.Flush();
                s.Close();
            }
            catch { }
        }

        public static List<PratilacBasic> GetSviPratioci()
        {
            var lista = new List<PratilacBasic>();
            try
            {
                var s = DataLayer.GetSession();
                var q = from p in s.Query<Pratilac>() select p;

                foreach (var p in q)
                    lista.Add(new PratilacBasic { Id = p.Id, Ime = p.Ime, Prezime = p.Prezime, Pol = p.Pol, BrojTelefona = p.BrojTelefona });

                s.Close();
            }
            catch { }
            return lista;
        }

        public static void DodeliPratioca(int aktivnostId, int deteId, int? pratilacId)
        {
            try
            {
                var s = DataLayer.GetSession();

                var a = s.Load<Aktivnost>(aktivnostId);
                var ev = a.Evidencije.FirstOrDefault(x => x.Dete.Id == deteId);
                if (ev == null)
                    throw new Exception("Dete nije u evidenciji za izabranu aktivnost.");

                ev.Pratilac = null;
                if(pratilacId != null)
                    ev.Pratilac = s.Load<Pratilac>(pratilacId.Value);

                s.Flush();
                s.Close();
            }
            catch { }
        }

        public static int DodajPratioca(string ime, string prezime, string pol, string brojTelefona)
        {
            int id = 0;
            try
            {
                var s = DataLayer.GetSession();

                var p = new Pratilac { Ime = ime, Prezime = prezime, Pol = pol, BrojTelefona = brojTelefona };
                s.Save(p);
                s.Flush();
                id = p.Id;
                s.Close();
            }
            catch { }
            return id;
        }

        #endregion

        private static bool DeteUpadaUStarosnuGrupu(Dete dete, Aktivnost aktivnost)
        {
            var sg = (aktivnost.StarosnaGrupa ?? "").Trim();
            if (string.IsNullOrWhiteSpace(sg)) return true;

            var nums = sg.Split('-').Select(m => int.Parse(m)).ToList();
            if (nums.Count == 1) return IzracunajStarostUGodinama(dete.DatumRodjenja, aktivnost.DatumIVreme) <= nums[0];
            if (nums.Count != 2) return true;
             
            int min = nums[0];
            int max = nums[1];

            int age = IzracunajStarostUGodinama(dete.DatumRodjenja, aktivnost.DatumIVreme);

            return age >= min && age <= max;
        }

        private static int IzracunajStarostUGodinama(DateTime rodjenje, DateTime naDatum)
        {
            int age = naDatum.Year - rodjenje.Year;
            if (naDatum.Month < rodjenje.Month || (naDatum.Month == rodjenje.Month && naDatum.Day < rodjenje.Day))
                age--;
            return age;
        }
    }
}